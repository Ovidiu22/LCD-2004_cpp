
LCD-2004_cpp.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000066  00800100  00000b3e  00000bb2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000b3e  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000005c  00000000  00000000  00000c18  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000c74  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000088  00000000  00000000  00000cb4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000119c  00000000  00000000  00000d3c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000008ce  00000000  00000000  00001ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000655  00000000  00000000  000027a6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000140  00000000  00000000  00002dfc  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000062c  00000000  00000000  00002f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000067b  00000000  00000000  00003568  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00003be3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   8:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
   c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  10:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  14:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  18:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  1c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  20:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  24:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  28:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  2c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  30:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  34:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  38:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  3c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  40:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  44:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  48:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  4c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  50:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  54:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  58:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  5c:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  60:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>
  64:	0c 94 49 00 	jmp	0x92	; 0x92 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	ee e3       	ldi	r30, 0x3E	; 62
  7c:	fb e0       	ldi	r31, 0x0B	; 11
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a6 36       	cpi	r26, 0x66	; 102
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>
  8a:	0e 94 42 02 	call	0x484	; 0x484 <main>
  8e:	0c 94 9d 05 	jmp	0xb3a	; 0xb3a <_exit>

00000092 <__bad_interrupt>:
  92:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000096 <_Z14configLCDPortsv>:
Description:maps the data and control pins to the uC i/o ports
******************************************************************** */
void configLCDPorts(void)
{
	/* configure the microprocessor pins for the data lines */
	lcd_Data_DDR |= (1<<lcd_D7_bit) | (1<<lcd_D6_bit) | (1<<lcd_D5_bit) | (1<<lcd_D4_bit);
  96:	8a b1       	in	r24, 0x0a	; 10
  98:	80 6f       	ori	r24, 0xF0	; 240
  9a:	8a b9       	out	0x0a, r24	; 10
	
	/* configure the microprocessor pins for the control lines */
	lcd_Ctlr_DDR |= (1<<lcd_RW_bit) | (1<<lcd_RS_bit) | (1<<lcd_E_bit);
  9c:	8a b1       	in	r24, 0x0a	; 10
  9e:	8b 60       	ori	r24, 0x0B	; 11
  a0:	8a b9       	out	0x0a, r24	; 10
	
	/* Turn on LCD */
	DDRB |= (1<<lcd_ONOFF_bit);
  a2:	20 9a       	sbi	0x04, 0	; 4
  a4:	08 95       	ret

000000a6 <_Z11lcd_write_4h>:
			RS is configured for the expected register
			E is low, RW is low
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
  a6:	cf 93       	push	r28
  a8:	df 93       	push	r29
  aa:	00 d0       	rcall	.+0      	; 0xac <_Z11lcd_write_4h+0x6>
  ac:	00 d0       	rcall	.+0      	; 0xae <_Z11lcd_write_4h+0x8>
  ae:	cd b7       	in	r28, 0x3d	; 61
  b0:	de b7       	in	r29, 0x3e	; 62
	uint8_t mask[4] = {0};
  b2:	19 82       	std	Y+1, r1	; 0x01
  b4:	1a 82       	std	Y+2, r1	; 0x02
  b6:	1b 82       	std	Y+3, r1	; 0x03
  b8:	1c 82       	std	Y+4, r1	; 0x04
  ba:	fe 01       	movw	r30, r28
  bc:	31 96       	adiw	r30, 0x01	; 1
  be:	27 e0       	ldi	r18, 0x07	; 7
  c0:	30 e0       	ldi	r19, 0x00	; 0
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  c2:	90 e0       	ldi	r25, 0x00	; 0
		{
			mask[i] = 1;
  c4:	61 e0       	ldi	r22, 0x01	; 1
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
	{
		if (theNibble & 1 << (7 - i))
  c6:	ac 01       	movw	r20, r24
  c8:	02 2e       	mov	r0, r18
  ca:	02 c0       	rjmp	.+4      	; 0xd0 <_Z11lcd_write_4h+0x2a>
  cc:	55 95       	asr	r21
  ce:	47 95       	ror	r20
  d0:	0a 94       	dec	r0
  d2:	e2 f7       	brpl	.-8      	; 0xcc <_Z11lcd_write_4h+0x26>
  d4:	40 fd       	sbrc	r20, 0
		{
			mask[i] = 1;
  d6:	60 83       	st	Z, r22
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	31 09       	sbc	r19, r1
  dc:	31 96       	adiw	r30, 0x01	; 1
			uses either time delays or the busy flag
******************************************************************** */
void lcd_write_4(uint8_t theNibble)
{
	uint8_t mask[4] = {0};
	for (uint8_t i = 0; i < 4; i++)
  de:	23 30       	cpi	r18, 0x03	; 3
  e0:	31 05       	cpc	r19, r1
  e2:	89 f7       	brne	.-30     	; 0xc6 <_Z11lcd_write_4h+0x20>
			mask[i] = 1;
		}
	}
	
	/* Clear bits in first step */
	lcd_Data_Port &= ~((1 << lcd_D7_bit) | (1 << lcd_D6_bit) | (1 << lcd_D5_bit) | (1 << lcd_D4_bit));
  e4:	8b b1       	in	r24, 0x0b	; 11
  e6:	8f 70       	andi	r24, 0x0F	; 15
  e8:	8b b9       	out	0x0b, r24	; 11

	/* Set bits where necessary */
	lcd_Data_Port |= ((mask[0]) << lcd_D7_bit | (mask[1]) << lcd_D6_bit | (mask[2]) << lcd_D5_bit | (mask[3]) << lcd_D4_bit);
  ea:	2b b1       	in	r18, 0x0b	; 11
  ec:	49 81       	ldd	r20, Y+1	; 0x01
  ee:	30 e8       	ldi	r19, 0x80	; 128
  f0:	43 9f       	mul	r20, r19
  f2:	c0 01       	movw	r24, r0
  f4:	11 24       	eor	r1, r1
  f6:	9a 81       	ldd	r25, Y+2	; 0x02
  f8:	30 e4       	ldi	r19, 0x40	; 64
  fa:	93 9f       	mul	r25, r19
  fc:	a0 01       	movw	r20, r0
  fe:	11 24       	eor	r1, r1
 100:	48 2b       	or	r20, r24
 102:	42 2b       	or	r20, r18
 104:	9b 81       	ldd	r25, Y+3	; 0x03
 106:	80 e2       	ldi	r24, 0x20	; 32
 108:	98 9f       	mul	r25, r24
 10a:	90 01       	movw	r18, r0
 10c:	11 24       	eor	r1, r1
 10e:	24 2b       	or	r18, r20
 110:	9c 81       	ldd	r25, Y+4	; 0x04
 112:	30 e1       	ldi	r19, 0x10	; 16
 114:	93 9f       	mul	r25, r19
 116:	c0 01       	movw	r24, r0
 118:	11 24       	eor	r1, r1
 11a:	82 2b       	or	r24, r18
 11c:	8b b9       	out	0x0b, r24	; 11

    /* Write the data */
    enable_E_Pin;                   // Enable pin high
 11e:	5b 9a       	sbi	0x0b, 3	; 11
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 120:	85 e0       	ldi	r24, 0x05	; 5
 122:	8a 95       	dec	r24
 124:	f1 f7       	brne	.-4      	; 0x122 <_Z11lcd_write_4h+0x7c>
 126:	00 00       	nop
    _delay_us(1);                   // implement 'Data set-up time' (80 nS) and 'Enable pulse width' (230 nS)
    disable_E_Pin;                  // Enable pin low
 128:	5b 98       	cbi	0x0b, 3	; 11
 12a:	35 e0       	ldi	r19, 0x05	; 5
 12c:	3a 95       	dec	r19
 12e:	f1 f7       	brne	.-4      	; 0x12c <_Z11lcd_write_4h+0x86>
 130:	00 00       	nop
    _delay_us(1);                   // implement 'Data hold time' (10 nS) and 'Enable cycle time' (500 nS)
}
 132:	0f 90       	pop	r0
 134:	0f 90       	pop	r0
 136:	0f 90       	pop	r0
 138:	0f 90       	pop	r0
 13a:	df 91       	pop	r29
 13c:	cf 91       	pop	r28
 13e:	08 95       	ret

00000140 <_Z22lcd_write_character_4fh>:
Outputs:	none
Description:sends a byte to the LCD data register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_character_4f(uint8_t theChar)
{
 140:	cf 93       	push	r28
 142:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 144:	58 98       	cbi	0x0b, 0	; 11
    set_RS_HIGH_Data;					// Select the Data Register (RS high)
 146:	59 9a       	sbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 148:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theChar);				// Write the upper 4-bits of the data
 14a:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11lcd_write_4h>
    lcd_write_4(theChar << 4);			// Write the lower 4-bits of the data
 14e:	8c 2f       	mov	r24, r28
 150:	82 95       	swap	r24
 152:	80 7f       	andi	r24, 0xF0	; 240
 154:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11lcd_write_4h>
}
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <_Z24lcd_write_instruction_4fh>:
Outputs:	none
Description:sends a byte to the LCD instruction register, configures RW 
			(busy flag is implemented)
******************************************************************** */
void lcd_write_instruction_4f(uint8_t theInstruction)
{
 15c:	cf 93       	push	r28
 15e:	c8 2f       	mov	r28, r24
    set_RW_LOW_write;					// Write to LCD module (RW low)
 160:	58 98       	cbi	0x0b, 0	; 11
    set_RS_LOW_Instr;					// Select the Data Register (RS high)
 162:	59 98       	cbi	0x0b, 1	; 11
    disable_E_Pin;						// Make sure E is initially low
 164:	5b 98       	cbi	0x0b, 3	; 11
    lcd_write_4(theInstruction);		// Write the upper 4-bits of the data
 166:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11lcd_write_4h>
    lcd_write_4(theInstruction << 4);	// Write the lower 4-bits of the data
 16a:	8c 2f       	mov	r24, r28
 16c:	82 95       	swap	r24
 16e:	80 7f       	andi	r24, 0xF0	; 240
 170:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11lcd_write_4h>
}
 174:	cf 91       	pop	r28
 176:	08 95       	ret

00000178 <_Z14lcd_check_BF_4v>:
void lcd_check_BF_4(void)
{
	
    uint8_t busy_flag_copy;             // busy flag 'mirror'

    set_D7_input;						// set D7 data direction to input
 178:	57 98       	cbi	0x0a, 7	; 10
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
 17a:	59 98       	cbi	0x0b, 1	; 11
    set_RW_HIGH_read;					// read from LCD module (RW high)
 17c:	58 9a       	sbi	0x0b, 0	; 11

    do
    {
        busy_flag_copy = 0;                         // initialize busy flag 'mirror'
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 17e:	5b 9a       	sbi	0x0b, 3	; 11
 180:	85 e0       	ldi	r24, 0x05	; 5
 182:	8a 95       	dec	r24
 184:	f1 f7       	brne	.-4      	; 0x182 <_Z14lcd_check_BF_4v+0xa>
 186:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)

        busy_flag_copy |= (lcd_D7_pin & (1<<lcd_D7_bit));  // get actual busy flag status
 188:	89 b1       	in	r24, 0x09	; 9

        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 18a:	5b 98       	cbi	0x0b, 3	; 11
 18c:	95 e0       	ldi	r25, 0x05	; 5
 18e:	9a 95       	dec	r25
 190:	f1 f7       	brne	.-4      	; 0x18e <_Z14lcd_check_BF_4v+0x16>
 192:	00 00       	nop
        _delay_us(1);                               // implement 'Address hold time' (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )
        
// read and discard alternate nibbles (D3 information)
        lcd_Ctlr_Port |= (1<<lcd_E_bit);            // Enable pin high
 194:	5b 9a       	sbi	0x0b, 3	; 11
 196:	95 e0       	ldi	r25, 0x05	; 5
 198:	9a 95       	dec	r25
 19a:	f1 f7       	brne	.-4      	; 0x198 <_Z14lcd_check_BF_4v+0x20>
 19c:	00 00       	nop
        _delay_us(1);                               // implement 'Delay data time' (160 nS) and 'Enable pulse width' (230 nS)
        lcd_Ctlr_Port &= ~(1<<lcd_E_bit);           // Enable pin low
 19e:	5b 98       	cbi	0x0b, 3	; 11
 1a0:	95 e0       	ldi	r25, 0x05	; 5
 1a2:	9a 95       	dec	r25
 1a4:	f1 f7       	brne	.-4      	; 0x1a2 <_Z14lcd_check_BF_4v+0x2a>
 1a6:	00 00       	nop

    set_D7_input;						// set D7 data direction to input
    set_RS_LOW_Instr;					// select the Instruction Register (RS low)
    set_RW_HIGH_read;					// read from LCD module (RW high)

    do
 1a8:	88 23       	and	r24, r24
 1aa:	4c f3       	brlt	.-46     	; 0x17e <_Z14lcd_check_BF_4v+0x6>
        _delay_us(1);                               // implement 'Address hold time (10 nS), 'Data hold time' (10 nS), and 'Enable cycle time' (500 nS )

    } while (busy_flag_copy);                       // check again if busy flag was high

// arrive here if busy flag is clear -  clean up and return 
    set_RW_LOW_write;               // write to LCD module (RW low)
 1ac:	58 98       	cbi	0x0b, 0	; 11
    set_D7_output;                  // reset D7 data direction to output	
 1ae:	57 9a       	sbi	0x0a, 7	; 10
 1b0:	08 95       	ret

000001b2 <_Z11lcd_init_4fv>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1b2:	2f ef       	ldi	r18, 0xFF	; 255
 1b4:	80 e7       	ldi	r24, 0x70	; 112
 1b6:	92 e0       	ldi	r25, 0x02	; 2
 1b8:	21 50       	subi	r18, 0x01	; 1
 1ba:	80 40       	sbci	r24, 0x00	; 0
 1bc:	90 40       	sbci	r25, 0x00	; 0
 1be:	e1 f7       	brne	.-8      	; 0x1b8 <_Z11lcd_init_4fv+0x6>
 1c0:	00 c0       	rjmp	.+0      	; 0x1c2 <_Z11lcd_init_4fv+0x10>
 1c2:	00 00       	nop
	 this instruction can be sent on just the four available data lines and it will be interpreted
	 properly by the LCD controller.  The 'lcd_write_4' subroutine will accomplish this if the
	 control lines have previously been configured properly. */

	/* Set up the RS, E, and RW lines for the 'lcd_write_4' function. */
	set_RS_LOW_Instr;	// Select the Instruction Register (RS low)
 1c4:	59 98       	cbi	0x0b, 1	; 11
	disable_E_Pin;		// Make sure E is initially low
 1c6:	5b 98       	cbi	0x0b, 3	; 11
	set_RW_LOW_write;	// write to LCD module (RW low)
 1c8:	58 98       	cbi	0x0b, 0	; 11

	/* Reset the LCD controller */
	lcd_write_4(lcd_FunctionReset);		// First part of reset sequence
 1ca:	80 e3       	ldi	r24, 0x30	; 48
 1cc:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11lcd_write_4h>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1d0:	25 e3       	ldi	r18, 0x35	; 53
 1d2:	2a 95       	dec	r18
 1d4:	f1 f7       	brne	.-4      	; 0x1d2 <_Z11lcd_init_4fv+0x20>
 1d6:	00 00       	nop
	_delay_us(10);                      // Delay of 10 us
	
	lcd_write_4(lcd_FunctionReset);		// Second part of reset sequence
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11lcd_write_4h>
 1de:	8f e1       	ldi	r24, 0x1F	; 31
 1e0:	93 e0       	ldi	r25, 0x03	; 3
 1e2:	01 97       	sbiw	r24, 0x01	; 1
 1e4:	f1 f7       	brne	.-4      	; 0x1e2 <_Z11lcd_init_4fv+0x30>
 1e6:	00 c0       	rjmp	.+0      	; 0x1e8 <_Z11lcd_init_4fv+0x36>
 1e8:	00 00       	nop
	_delay_us(200);						// Delay of 200 us

	lcd_write_4(lcd_FunctionReset);		// Third part of reset sequence
 1ea:	80 e3       	ldi	r24, 0x30	; 48
 1ec:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11lcd_write_4h>
 1f0:	8f e3       	ldi	r24, 0x3F	; 63
 1f2:	91 e0       	ldi	r25, 0x01	; 1
 1f4:	01 97       	sbiw	r24, 0x01	; 1
 1f6:	f1 f7       	brne	.-4      	; 0x1f4 <_Z11lcd_init_4fv+0x42>
 1f8:	00 c0       	rjmp	.+0      	; 0x1fa <_Z11lcd_init_4fv+0x48>
 1fa:	00 00       	nop
	/* Preliminary Function Set instruction - used only to set the 4-bit mode.
	 The number of lines or the font cannot be set at this time since the controller is still in the
	 8-bit mode, but the data transfer mode can be changed since this parameter is determined by one
	 of the upper four bits of the instruction. */
	
	lcd_write_4(lcd_FunctionSet4bit);	// Set 4-bit mode
 1fc:	88 e2       	ldi	r24, 0x28	; 40
 1fe:	0e 94 53 00 	call	0xa6	; 0xa6 <_Z11lcd_write_4h>
	// From this point on the busy flag is available

	// Function Set instruction
	lcd_check_BF_4();    // Makes sure LCD controller is ready
 202:	0e 94 bc 00 	call	0x178	; 0x178 <_Z14lcd_check_BF_4v>
                         
	lcd_write_instruction_4f(lcd_FunctionSet4bit);  // Set mode, lines, and font
 206:	88 e2       	ldi	r24, 0x28	; 40
 208:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>
	/*The next three instructions are specified in the data sheet as part of the initialization routine,
	  so it is a good idea (but probably not necessary) to do them just as specified and then redo them
	  later if the application requires a different configuration.*/

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 20c:	0e 94 bc 00 	call	0x178	; 0x178 <_Z14lcd_check_BF_4v>
	lcd_write_instruction_4f(lcd_DisplayOff);       // Turn display OFF
 210:	88 e0       	ldi	r24, 0x08	; 8
 212:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>

	/* Clear Display instruction */
	lcd_check_BF_4();
 216:	0e 94 bc 00 	call	0x178	; 0x178 <_Z14lcd_check_BF_4v>
	lcd_write_instruction_4f(lcd_Clear);            // Clear display RAM
 21a:	81 e0       	ldi	r24, 0x01	; 1
 21c:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>
	
	/* Entry Mode Set instruction */
	lcd_check_BF_4();
 220:	0e 94 bc 00 	call	0x178	; 0x178 <_Z14lcd_check_BF_4v>
	lcd_write_instruction_4f(lcd_EntryMode);        // Set desired shift characteristics
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>
	/*This is the end of the LCD controller initialization as specified in the data sheet, but the display
	  has been left in the OFF condition.  This is a good time to turn the display back ON. */

	/* Display On/Off Control instruction */
	lcd_check_BF_4();
 22a:	0e 94 bc 00 	call	0x178	; 0x178 <_Z14lcd_check_BF_4v>
	lcd_write_instruction_4f(lcd_DisplayOn);        // turn the display ON
 22e:	8c e0       	ldi	r24, 0x0C	; 12
 230:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>
 234:	08 95       	ret

00000236 <_Z7initLCDv>:
			ports and initializes the LCD
******************************************************************** */
void initLCD(void)
{
	/* Configure the data ports and pins */
	configLCDPorts();
 236:	0e 94 4b 00 	call	0x96	; 0x96 <_Z14configLCDPortsv>

	/* Initialize the LCD controller as determined by instructions */
	lcd_init_4f();
 23a:	0e 94 d9 00 	call	0x1b2	; 0x1b2 <_Z11lcd_init_4fv>
 23e:	08 95       	ret

00000240 <_Z19lcd_write_string_4fPh>:
Inputs:		string to be displayed (stringData)
Outputs:	none
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
 240:	0f 93       	push	r16
 242:	1f 93       	push	r17
 244:	cf 93       	push	r28
 246:	df 93       	push	r29
 248:	00 d0       	rcall	.+0      	; 0x24a <_Z19lcd_write_string_4fPh+0xa>
 24a:	cd b7       	in	r28, 0x3d	; 61
 24c:	de b7       	in	r29, 0x3e	; 62
 24e:	8c 01       	movw	r16, r24
    volatile int i = 0;                             // Character counter
 250:	1a 82       	std	Y+2, r1	; 0x02
 252:	19 82       	std	Y+1, r1	; 0x01
    while (stringData[i] != 0)
 254:	e9 81       	ldd	r30, Y+1	; 0x01
 256:	fa 81       	ldd	r31, Y+2	; 0x02
 258:	e8 0f       	add	r30, r24
 25a:	f9 1f       	adc	r31, r25
 25c:	80 81       	ld	r24, Z
 25e:	88 23       	and	r24, r24
 260:	a9 f0       	breq	.+42     	; 0x28c <_Z19lcd_write_string_4fPh+0x4c>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
 262:	0e 94 bc 00 	call	0x178	; 0x178 <_Z14lcd_check_BF_4v>
        lcd_write_character_4f(stringData[i]);
 266:	e9 81       	ldd	r30, Y+1	; 0x01
 268:	fa 81       	ldd	r31, Y+2	; 0x02
 26a:	e0 0f       	add	r30, r16
 26c:	f1 1f       	adc	r31, r17
 26e:	80 81       	ld	r24, Z
 270:	0e 94 a0 00 	call	0x140	; 0x140 <_Z22lcd_write_character_4fh>
        i++;
 274:	89 81       	ldd	r24, Y+1	; 0x01
 276:	9a 81       	ldd	r25, Y+2	; 0x02
 278:	01 96       	adiw	r24, 0x01	; 1
 27a:	9a 83       	std	Y+2, r25	; 0x02
 27c:	89 83       	std	Y+1, r24	; 0x01
Description:writes a string of characters on LCD; uses the busy flag
******************************************************************** */
void lcd_write_string_4f(uint8_t stringData[])
{
    volatile int i = 0;                             // Character counter
    while (stringData[i] != 0)
 27e:	e9 81       	ldd	r30, Y+1	; 0x01
 280:	fa 81       	ldd	r31, Y+2	; 0x02
 282:	e0 0f       	add	r30, r16
 284:	f1 1f       	adc	r31, r17
 286:	80 81       	ld	r24, Z
 288:	81 11       	cpse	r24, r1
 28a:	eb cf       	rjmp	.-42     	; 0x262 <_Z19lcd_write_string_4fPh+0x22>
    {
        lcd_check_BF_4();                           // Make sure LCD controller is ready    
        lcd_write_character_4f(stringData[i]);
        i++;
    }
}
 28c:	0f 90       	pop	r0
 28e:	0f 90       	pop	r0
 290:	df 91       	pop	r29
 292:	cf 91       	pop	r28
 294:	1f 91       	pop	r17
 296:	0f 91       	pop	r16
 298:	08 95       	ret

0000029a <_Z15updateLCDScreenhPKchS0_>:
Inputs:		two pointers to a uint8 type data and 2 values, one for each row
Outputs:	none
Description:commands writing on LCD line by line 
******************************************************************** */
void updateLCDScreen(uint8_t row, const char * s1, uint8_t data, const char * s2)
{
 29a:	df 92       	push	r13
 29c:	ef 92       	push	r14
 29e:	ff 92       	push	r15
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	cd b7       	in	r28, 0x3d	; 61
 2aa:	de b7       	in	r29, 0x3e	; 62
 2ac:	af 97       	sbiw	r28, 0x2f	; 47
 2ae:	0f b6       	in	r0, 0x3f	; 63
 2b0:	f8 94       	cli
 2b2:	de bf       	out	0x3e, r29	; 62
 2b4:	0f be       	out	0x3f, r0	; 63
 2b6:	cd bf       	out	0x3d, r28	; 61
 2b8:	18 2f       	mov	r17, r24
 2ba:	d6 2e       	mov	r13, r22
 2bc:	07 2f       	mov	r16, r23
 2be:	84 2f       	mov	r24, r20
 2c0:	79 01       	movw	r14, r18
	/* convert data to string [buf] */
	char data2char[4] = "   ";
 2c2:	20 e2       	ldi	r18, 0x20	; 32
 2c4:	30 e2       	ldi	r19, 0x20	; 32
 2c6:	3a 83       	std	Y+2, r19	; 0x02
 2c8:	29 83       	std	Y+1, r18	; 0x01
 2ca:	20 e2       	ldi	r18, 0x20	; 32
 2cc:	30 e0       	ldi	r19, 0x00	; 0
 2ce:	3c 83       	std	Y+4, r19	; 0x04
 2d0:	2b 83       	std	Y+3, r18	; 0x03
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
 2d2:	96 e1       	ldi	r25, 0x16	; 22
 2d4:	e4 e1       	ldi	r30, 0x14	; 20
 2d6:	f1 e0       	ldi	r31, 0x01	; 1
 2d8:	de 01       	movw	r26, r28
 2da:	5a 96       	adiw	r26, 0x1a	; 26
 2dc:	01 90       	ld	r0, Z+
 2de:	0d 92       	st	X+, r0
 2e0:	9a 95       	dec	r25
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <_Z15updateLCDScreenhPKchS0_+0x42>
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
 2e4:	4f 3f       	cpi	r20, 0xFF	; 255
 2e6:	39 f0       	breq	.+14     	; 0x2f6 <_Z15updateLCDScreenhPKchS0_+0x5c>
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 2e8:	4a e0       	ldi	r20, 0x0A	; 10
 2ea:	be 01       	movw	r22, r28
 2ec:	6f 5f       	subi	r22, 0xFF	; 255
 2ee:	7f 4f       	sbci	r23, 0xFF	; 255
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 70 02 	call	0x4e0	; 0x4e0 <__itoa_ncheck>
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
 2f6:	60 e0       	ldi	r22, 0x00	; 0
 2f8:	71 e0       	ldi	r23, 0x01	; 1
 2fa:	8d 2d       	mov	r24, r13
 2fc:	90 2f       	mov	r25, r16
 2fe:	0e 94 67 02 	call	0x4ce	; 0x4ce <strcmp>
 302:	89 2b       	or	r24, r25
 304:	09 f4       	brne	.+2      	; 0x308 <_Z15updateLCDScreenhPKchS0_+0x6e>
 306:	89 c0       	rjmp	.+274    	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 308:	60 e0       	ldi	r22, 0x00	; 0
 30a:	71 e0       	ldi	r23, 0x01	; 1
 30c:	c7 01       	movw	r24, r14
 30e:	0e 94 67 02 	call	0x4ce	; 0x4ce <strcmp>
 312:	89 2b       	or	r24, r25
 314:	31 f4       	brne	.+12     	; 0x322 <_Z15updateLCDScreenhPKchS0_+0x88>
 316:	0f 2e       	mov	r0, r31
 318:	f9 e2       	ldi	r31, 0x29	; 41
 31a:	ef 2e       	mov	r14, r31
 31c:	f1 e0       	ldi	r31, 0x01	; 1
 31e:	ff 2e       	mov	r15, r31
 320:	f0 2d       	mov	r31, r0
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 322:	ce 01       	movw	r24, r28
 324:	4a 96       	adiw	r24, 0x1a	; 26
 326:	9f 93       	push	r25
 328:	8f 93       	push	r24
 32a:	ff 92       	push	r15
 32c:	ef 92       	push	r14
 32e:	49 97       	sbiw	r24, 0x19	; 25
 330:	9f 93       	push	r25
 332:	8f 93       	push	r24
 334:	0f 93       	push	r16
 336:	df 92       	push	r13
 338:	85 e0       	ldi	r24, 0x05	; 5
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	9f 93       	push	r25
 33e:	8f 93       	push	r24
 340:	1f 92       	push	r1
 342:	85 e1       	ldi	r24, 0x15	; 21
 344:	8f 93       	push	r24
 346:	ce 01       	movw	r24, r28
 348:	05 96       	adiw	r24, 0x05	; 5
 34a:	9f 93       	push	r25
 34c:	8f 93       	push	r24
 34e:	0e 94 95 02 	call	0x52a	; 0x52a <snprintf>
	if (strcmp(s1, "CLEAR") == 0 ) { snprintf( charRow, sizeof charRow, "%s", emptyString ); };
 352:	6e e0       	ldi	r22, 0x0E	; 14
 354:	71 e0       	ldi	r23, 0x01	; 1
 356:	8d 2d       	mov	r24, r13
 358:	90 2f       	mov	r25, r16
 35a:	0e 94 67 02 	call	0x4ce	; 0x4ce <strcmp>
 35e:	0f b6       	in	r0, 0x3f	; 63
 360:	f8 94       	cli
 362:	de bf       	out	0x3e, r29	; 62
 364:	0f be       	out	0x3f, r0	; 63
 366:	cd bf       	out	0x3d, r28	; 61
 368:	89 2b       	or	r24, r25
 36a:	b1 f4       	brne	.+44     	; 0x398 <_Z15updateLCDScreenhPKchS0_+0xfe>
 36c:	ce 01       	movw	r24, r28
 36e:	4a 96       	adiw	r24, 0x1a	; 26
 370:	9f 93       	push	r25
 372:	8f 93       	push	r24
 374:	8b e0       	ldi	r24, 0x0B	; 11
 376:	91 e0       	ldi	r25, 0x01	; 1
 378:	9f 93       	push	r25
 37a:	8f 93       	push	r24
 37c:	1f 92       	push	r1
 37e:	85 e1       	ldi	r24, 0x15	; 21
 380:	8f 93       	push	r24
 382:	ce 01       	movw	r24, r28
 384:	05 96       	adiw	r24, 0x05	; 5
 386:	9f 93       	push	r25
 388:	8f 93       	push	r24
 38a:	0e 94 95 02 	call	0x52a	; 0x52a <snprintf>
 38e:	0f b6       	in	r0, 0x3f	; 63
 390:	f8 94       	cli
 392:	de bf       	out	0x3e, r29	; 62
 394:	0f be       	out	0x3f, r0	; 63
 396:	cd bf       	out	0x3d, r28	; 61
		
	switch(row) {
 398:	12 30       	cpi	r17, 0x02	; 2
 39a:	69 f0       	breq	.+26     	; 0x3b6 <_Z15updateLCDScreenhPKchS0_+0x11c>
 39c:	18 f4       	brcc	.+6      	; 0x3a4 <_Z15updateLCDScreenhPKchS0_+0x10a>
 39e:	11 30       	cpi	r17, 0x01	; 1
 3a0:	31 f0       	breq	.+12     	; 0x3ae <_Z15updateLCDScreenhPKchS0_+0x114>
 3a2:	14 c0       	rjmp	.+40     	; 0x3cc <_Z15updateLCDScreenhPKchS0_+0x132>
 3a4:	13 30       	cpi	r17, 0x03	; 3
 3a6:	59 f0       	breq	.+22     	; 0x3be <_Z15updateLCDScreenhPKchS0_+0x124>
 3a8:	14 30       	cpi	r17, 0x04	; 4
 3aa:	69 f0       	breq	.+26     	; 0x3c6 <_Z15updateLCDScreenhPKchS0_+0x12c>
 3ac:	0f c0       	rjmp	.+30     	; 0x3cc <_Z15updateLCDScreenhPKchS0_+0x132>
		case 1: /* ======= Line 1 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineOne);
 3ae:	80 e8       	ldi	r24, 0x80	; 128
 3b0:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>
			break;
 3b4:	0b c0       	rjmp	.+22     	; 0x3cc <_Z15updateLCDScreenhPKchS0_+0x132>
		case 2: /* ======= Line 2 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineTwo);
 3b6:	80 ec       	ldi	r24, 0xC0	; 192
 3b8:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>
			break;
 3bc:	07 c0       	rjmp	.+14     	; 0x3cc <_Z15updateLCDScreenhPKchS0_+0x132>
		case 3: /* ======= Line 3 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_LineThree);
 3be:	84 e9       	ldi	r24, 0x94	; 148
 3c0:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>
			break;
 3c4:	03 c0       	rjmp	.+6      	; 0x3cc <_Z15updateLCDScreenhPKchS0_+0x132>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour);
 3c6:	84 ed       	ldi	r24, 0xD4	; 212
 3c8:	0e 94 ae 00 	call	0x15c	; 0x15c <_Z24lcd_write_instruction_4fh>
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow);
 3cc:	ce 01       	movw	r24, r28
 3ce:	05 96       	adiw	r24, 0x05	; 5
 3d0:	0e 94 20 01 	call	0x240	; 0x240 <_Z19lcd_write_string_4fPh>
}
 3d4:	49 c0       	rjmp	.+146    	; 0x468 <__LOCK_REGION_LENGTH__+0x68>
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 3d6:	ce 01       	movw	r24, r28
 3d8:	4a 96       	adiw	r24, 0x1a	; 26
 3da:	9f 93       	push	r25
 3dc:	8f 93       	push	r24
 3de:	89 e2       	ldi	r24, 0x29	; 41
 3e0:	91 e0       	ldi	r25, 0x01	; 1
 3e2:	9f 93       	push	r25
 3e4:	8f 93       	push	r24
 3e6:	9e 01       	movw	r18, r28
 3e8:	2f 5f       	subi	r18, 0xFF	; 255
 3ea:	3f 4f       	sbci	r19, 0xFF	; 255
 3ec:	3f 93       	push	r19
 3ee:	2f 93       	push	r18
 3f0:	9f 93       	push	r25
 3f2:	8f 93       	push	r24
 3f4:	85 e0       	ldi	r24, 0x05	; 5
 3f6:	91 e0       	ldi	r25, 0x01	; 1
 3f8:	9f 93       	push	r25
 3fa:	8f 93       	push	r24
 3fc:	1f 92       	push	r1
 3fe:	85 e1       	ldi	r24, 0x15	; 21
 400:	8f 93       	push	r24
 402:	ce 01       	movw	r24, r28
 404:	05 96       	adiw	r24, 0x05	; 5
 406:	9f 93       	push	r25
 408:	8f 93       	push	r24
 40a:	0e 94 95 02 	call	0x52a	; 0x52a <snprintf>
 40e:	0f b6       	in	r0, 0x3f	; 63
 410:	f8 94       	cli
 412:	de bf       	out	0x3e, r29	; 62
 414:	0f be       	out	0x3f, r0	; 63
 416:	cd bf       	out	0x3d, r28	; 61
 418:	bf cf       	rjmp	.-130    	; 0x398 <_Z15updateLCDScreenhPKchS0_+0xfe>
	char charRow[21];
	char emptyString[] = "                     ";	//21 empty spaces
	
	if (data != NONE)	{ itoa(data, data2char, 10);}
	if (strcmp(s1, "NONE") == 0 ) { s1 = ""; }
	if (strcmp(s2, "NONE") == 0 ) { s2 = ""; }
 41a:	60 e0       	ldi	r22, 0x00	; 0
 41c:	71 e0       	ldi	r23, 0x01	; 1
 41e:	c7 01       	movw	r24, r14
 420:	0e 94 67 02 	call	0x4ce	; 0x4ce <strcmp>
 424:	89 2b       	or	r24, r25
 426:	b9 f2       	breq	.-82     	; 0x3d6 <_Z15updateLCDScreenhPKchS0_+0x13c>
	
	/* Create the strings to be displayed */
	snprintf( charRow, sizeof charRow, "%s%s%s%s", s1, data2char, s2, emptyString );
 428:	ce 01       	movw	r24, r28
 42a:	4a 96       	adiw	r24, 0x1a	; 26
 42c:	9f 93       	push	r25
 42e:	8f 93       	push	r24
 430:	ff 92       	push	r15
 432:	ef 92       	push	r14
 434:	49 97       	sbiw	r24, 0x19	; 25
 436:	9f 93       	push	r25
 438:	8f 93       	push	r24
 43a:	89 e2       	ldi	r24, 0x29	; 41
 43c:	91 e0       	ldi	r25, 0x01	; 1
 43e:	9f 93       	push	r25
 440:	8f 93       	push	r24
 442:	85 e0       	ldi	r24, 0x05	; 5
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	9f 93       	push	r25
 448:	8f 93       	push	r24
 44a:	1f 92       	push	r1
 44c:	85 e1       	ldi	r24, 0x15	; 21
 44e:	8f 93       	push	r24
 450:	ce 01       	movw	r24, r28
 452:	05 96       	adiw	r24, 0x05	; 5
 454:	9f 93       	push	r25
 456:	8f 93       	push	r24
 458:	0e 94 95 02 	call	0x52a	; 0x52a <snprintf>
 45c:	0f b6       	in	r0, 0x3f	; 63
 45e:	f8 94       	cli
 460:	de bf       	out	0x3e, r29	; 62
 462:	0f be       	out	0x3f, r0	; 63
 464:	cd bf       	out	0x3d, r28	; 61
 466:	98 cf       	rjmp	.-208    	; 0x398 <_Z15updateLCDScreenhPKchS0_+0xfe>
		case 4: /* ======= Line 4 ======= */
			lcd_write_instruction_4f(lcd_SetCursor | lcd_lineFour);
			break;
	}
	lcd_write_string_4f((unsigned char*) charRow);
}
 468:	af 96       	adiw	r28, 0x2f	; 47
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	de bf       	out	0x3e, r29	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	cd bf       	out	0x3d, r28	; 61
 474:	df 91       	pop	r29
 476:	cf 91       	pop	r28
 478:	1f 91       	pop	r17
 47a:	0f 91       	pop	r16
 47c:	ff 90       	pop	r15
 47e:	ef 90       	pop	r14
 480:	df 90       	pop	r13
 482:	08 95       	ret

00000484 <main>:
int main(void)
{
	uint8_t temperature = 16; //C
	uint8_t rel_humidity = 57; //%
	
	initLCD();
 484:	0e 94 1b 01 	call	0x236	; 0x236 <_Z7initLCDv>
	
	//updateLCDScreen(row on LCD, "Text 1", number, "Text 2");
	updateLCDScreen(1, "Hello there!", NONE, "NONE");
 488:	20 e0       	ldi	r18, 0x00	; 0
 48a:	31 e0       	ldi	r19, 0x01	; 1
 48c:	4f ef       	ldi	r20, 0xFF	; 255
 48e:	6a e2       	ldi	r22, 0x2A	; 42
 490:	71 e0       	ldi	r23, 0x01	; 1
 492:	81 e0       	ldi	r24, 0x01	; 1
 494:	0e 94 4d 01 	call	0x29a	; 0x29a <_Z15updateLCDScreenhPKchS0_>
	updateLCDScreen(2, "Temperature: ", temperature, "C");
 498:	27 e3       	ldi	r18, 0x37	; 55
 49a:	31 e0       	ldi	r19, 0x01	; 1
 49c:	40 e1       	ldi	r20, 0x10	; 16
 49e:	69 e3       	ldi	r22, 0x39	; 57
 4a0:	71 e0       	ldi	r23, 0x01	; 1
 4a2:	82 e0       	ldi	r24, 0x02	; 2
 4a4:	0e 94 4d 01 	call	0x29a	; 0x29a <_Z15updateLCDScreenhPKchS0_>
	updateLCDScreen(3, "Humidity: ", rel_humidity, "%");
 4a8:	27 e4       	ldi	r18, 0x47	; 71
 4aa:	31 e0       	ldi	r19, 0x01	; 1
 4ac:	49 e3       	ldi	r20, 0x39	; 57
 4ae:	69 e4       	ldi	r22, 0x49	; 73
 4b0:	71 e0       	ldi	r23, 0x01	; 1
 4b2:	83 e0       	ldi	r24, 0x03	; 3
 4b4:	0e 94 4d 01 	call	0x29a	; 0x29a <_Z15updateLCDScreenhPKchS0_>
	updateLCDScreen(4, "Enjoy tinkering!", NONE, "NONE");
 4b8:	20 e0       	ldi	r18, 0x00	; 0
 4ba:	31 e0       	ldi	r19, 0x01	; 1
 4bc:	4f ef       	ldi	r20, 0xFF	; 255
 4be:	64 e5       	ldi	r22, 0x54	; 84
 4c0:	71 e0       	ldi	r23, 0x01	; 1
 4c2:	84 e0       	ldi	r24, 0x04	; 4
 4c4:	0e 94 4d 01 	call	0x29a	; 0x29a <_Z15updateLCDScreenhPKchS0_>
	
	return 0;
 4c8:	80 e0       	ldi	r24, 0x00	; 0
 4ca:	90 e0       	ldi	r25, 0x00	; 0
 4cc:	08 95       	ret

000004ce <strcmp>:
 4ce:	fb 01       	movw	r30, r22
 4d0:	dc 01       	movw	r26, r24
 4d2:	8d 91       	ld	r24, X+
 4d4:	01 90       	ld	r0, Z+
 4d6:	80 19       	sub	r24, r0
 4d8:	01 10       	cpse	r0, r1
 4da:	d9 f3       	breq	.-10     	; 0x4d2 <strcmp+0x4>
 4dc:	99 0b       	sbc	r25, r25
 4de:	08 95       	ret

000004e0 <__itoa_ncheck>:
 4e0:	bb 27       	eor	r27, r27
 4e2:	4a 30       	cpi	r20, 0x0A	; 10
 4e4:	31 f4       	brne	.+12     	; 0x4f2 <__itoa_ncheck+0x12>
 4e6:	99 23       	and	r25, r25
 4e8:	22 f4       	brpl	.+8      	; 0x4f2 <__itoa_ncheck+0x12>
 4ea:	bd e2       	ldi	r27, 0x2D	; 45
 4ec:	90 95       	com	r25
 4ee:	81 95       	neg	r24
 4f0:	9f 4f       	sbci	r25, 0xFF	; 255
 4f2:	0c 94 7c 02 	jmp	0x4f8	; 0x4f8 <__utoa_common>

000004f6 <__utoa_ncheck>:
 4f6:	bb 27       	eor	r27, r27

000004f8 <__utoa_common>:
 4f8:	fb 01       	movw	r30, r22
 4fa:	55 27       	eor	r21, r21
 4fc:	aa 27       	eor	r26, r26
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	aa 1f       	adc	r26, r26
 504:	a4 17       	cp	r26, r20
 506:	10 f0       	brcs	.+4      	; 0x50c <__utoa_common+0x14>
 508:	a4 1b       	sub	r26, r20
 50a:	83 95       	inc	r24
 50c:	50 51       	subi	r21, 0x10	; 16
 50e:	b9 f7       	brne	.-18     	; 0x4fe <__utoa_common+0x6>
 510:	a0 5d       	subi	r26, 0xD0	; 208
 512:	aa 33       	cpi	r26, 0x3A	; 58
 514:	08 f0       	brcs	.+2      	; 0x518 <__utoa_common+0x20>
 516:	a9 5d       	subi	r26, 0xD9	; 217
 518:	a1 93       	st	Z+, r26
 51a:	00 97       	sbiw	r24, 0x00	; 0
 51c:	79 f7       	brne	.-34     	; 0x4fc <__utoa_common+0x4>
 51e:	b1 11       	cpse	r27, r1
 520:	b1 93       	st	Z+, r27
 522:	11 92       	st	Z+, r1
 524:	cb 01       	movw	r24, r22
 526:	0c 94 bc 04 	jmp	0x978	; 0x978 <strrev>

0000052a <snprintf>:
 52a:	ae e0       	ldi	r26, 0x0E	; 14
 52c:	b0 e0       	ldi	r27, 0x00	; 0
 52e:	eb e9       	ldi	r30, 0x9B	; 155
 530:	f2 e0       	ldi	r31, 0x02	; 2
 532:	0c 94 74 05 	jmp	0xae8	; 0xae8 <__prologue_saves__+0x1c>
 536:	0d 89       	ldd	r16, Y+21	; 0x15
 538:	1e 89       	ldd	r17, Y+22	; 0x16
 53a:	8f 89       	ldd	r24, Y+23	; 0x17
 53c:	98 8d       	ldd	r25, Y+24	; 0x18
 53e:	26 e0       	ldi	r18, 0x06	; 6
 540:	2c 83       	std	Y+4, r18	; 0x04
 542:	1a 83       	std	Y+2, r17	; 0x02
 544:	09 83       	std	Y+1, r16	; 0x01
 546:	97 ff       	sbrs	r25, 7
 548:	02 c0       	rjmp	.+4      	; 0x54e <snprintf+0x24>
 54a:	80 e0       	ldi	r24, 0x00	; 0
 54c:	90 e8       	ldi	r25, 0x80	; 128
 54e:	01 97       	sbiw	r24, 0x01	; 1
 550:	9e 83       	std	Y+6, r25	; 0x06
 552:	8d 83       	std	Y+5, r24	; 0x05
 554:	ae 01       	movw	r20, r28
 556:	45 5e       	subi	r20, 0xE5	; 229
 558:	5f 4f       	sbci	r21, 0xFF	; 255
 55a:	69 8d       	ldd	r22, Y+25	; 0x19
 55c:	7a 8d       	ldd	r23, Y+26	; 0x1a
 55e:	ce 01       	movw	r24, r28
 560:	01 96       	adiw	r24, 0x01	; 1
 562:	0e 94 c5 02 	call	0x58a	; 0x58a <vfprintf>
 566:	4d 81       	ldd	r20, Y+5	; 0x05
 568:	5e 81       	ldd	r21, Y+6	; 0x06
 56a:	57 fd       	sbrc	r21, 7
 56c:	0a c0       	rjmp	.+20     	; 0x582 <snprintf+0x58>
 56e:	2f 81       	ldd	r18, Y+7	; 0x07
 570:	38 85       	ldd	r19, Y+8	; 0x08
 572:	42 17       	cp	r20, r18
 574:	53 07       	cpc	r21, r19
 576:	0c f4       	brge	.+2      	; 0x57a <snprintf+0x50>
 578:	9a 01       	movw	r18, r20
 57a:	f8 01       	movw	r30, r16
 57c:	e2 0f       	add	r30, r18
 57e:	f3 1f       	adc	r31, r19
 580:	10 82       	st	Z, r1
 582:	2e 96       	adiw	r28, 0x0e	; 14
 584:	e4 e0       	ldi	r30, 0x04	; 4
 586:	0c 94 90 05 	jmp	0xb20	; 0xb20 <__epilogue_restores__+0x1c>

0000058a <vfprintf>:
 58a:	ab e0       	ldi	r26, 0x0B	; 11
 58c:	b0 e0       	ldi	r27, 0x00	; 0
 58e:	eb ec       	ldi	r30, 0xCB	; 203
 590:	f2 e0       	ldi	r31, 0x02	; 2
 592:	0c 94 66 05 	jmp	0xacc	; 0xacc <__prologue_saves__>
 596:	6c 01       	movw	r12, r24
 598:	7b 01       	movw	r14, r22
 59a:	8a 01       	movw	r16, r20
 59c:	fc 01       	movw	r30, r24
 59e:	17 82       	std	Z+7, r1	; 0x07
 5a0:	16 82       	std	Z+6, r1	; 0x06
 5a2:	83 81       	ldd	r24, Z+3	; 0x03
 5a4:	81 ff       	sbrs	r24, 1
 5a6:	cc c1       	rjmp	.+920    	; 0x940 <__stack+0x41>
 5a8:	ce 01       	movw	r24, r28
 5aa:	01 96       	adiw	r24, 0x01	; 1
 5ac:	3c 01       	movw	r6, r24
 5ae:	f6 01       	movw	r30, r12
 5b0:	93 81       	ldd	r25, Z+3	; 0x03
 5b2:	f7 01       	movw	r30, r14
 5b4:	93 fd       	sbrc	r25, 3
 5b6:	85 91       	lpm	r24, Z+
 5b8:	93 ff       	sbrs	r25, 3
 5ba:	81 91       	ld	r24, Z+
 5bc:	7f 01       	movw	r14, r30
 5be:	88 23       	and	r24, r24
 5c0:	09 f4       	brne	.+2      	; 0x5c4 <vfprintf+0x3a>
 5c2:	ba c1       	rjmp	.+884    	; 0x938 <__stack+0x39>
 5c4:	85 32       	cpi	r24, 0x25	; 37
 5c6:	39 f4       	brne	.+14     	; 0x5d6 <vfprintf+0x4c>
 5c8:	93 fd       	sbrc	r25, 3
 5ca:	85 91       	lpm	r24, Z+
 5cc:	93 ff       	sbrs	r25, 3
 5ce:	81 91       	ld	r24, Z+
 5d0:	7f 01       	movw	r14, r30
 5d2:	85 32       	cpi	r24, 0x25	; 37
 5d4:	29 f4       	brne	.+10     	; 0x5e0 <vfprintf+0x56>
 5d6:	b6 01       	movw	r22, r12
 5d8:	90 e0       	ldi	r25, 0x00	; 0
 5da:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 5de:	e7 cf       	rjmp	.-50     	; 0x5ae <vfprintf+0x24>
 5e0:	91 2c       	mov	r9, r1
 5e2:	21 2c       	mov	r2, r1
 5e4:	31 2c       	mov	r3, r1
 5e6:	ff e1       	ldi	r31, 0x1F	; 31
 5e8:	f3 15       	cp	r31, r3
 5ea:	d8 f0       	brcs	.+54     	; 0x622 <vfprintf+0x98>
 5ec:	8b 32       	cpi	r24, 0x2B	; 43
 5ee:	79 f0       	breq	.+30     	; 0x60e <vfprintf+0x84>
 5f0:	38 f4       	brcc	.+14     	; 0x600 <vfprintf+0x76>
 5f2:	80 32       	cpi	r24, 0x20	; 32
 5f4:	79 f0       	breq	.+30     	; 0x614 <vfprintf+0x8a>
 5f6:	83 32       	cpi	r24, 0x23	; 35
 5f8:	a1 f4       	brne	.+40     	; 0x622 <vfprintf+0x98>
 5fa:	23 2d       	mov	r18, r3
 5fc:	20 61       	ori	r18, 0x10	; 16
 5fe:	1d c0       	rjmp	.+58     	; 0x63a <vfprintf+0xb0>
 600:	8d 32       	cpi	r24, 0x2D	; 45
 602:	61 f0       	breq	.+24     	; 0x61c <vfprintf+0x92>
 604:	80 33       	cpi	r24, 0x30	; 48
 606:	69 f4       	brne	.+26     	; 0x622 <vfprintf+0x98>
 608:	23 2d       	mov	r18, r3
 60a:	21 60       	ori	r18, 0x01	; 1
 60c:	16 c0       	rjmp	.+44     	; 0x63a <vfprintf+0xb0>
 60e:	83 2d       	mov	r24, r3
 610:	82 60       	ori	r24, 0x02	; 2
 612:	38 2e       	mov	r3, r24
 614:	e3 2d       	mov	r30, r3
 616:	e4 60       	ori	r30, 0x04	; 4
 618:	3e 2e       	mov	r3, r30
 61a:	2a c0       	rjmp	.+84     	; 0x670 <vfprintf+0xe6>
 61c:	f3 2d       	mov	r31, r3
 61e:	f8 60       	ori	r31, 0x08	; 8
 620:	1d c0       	rjmp	.+58     	; 0x65c <vfprintf+0xd2>
 622:	37 fc       	sbrc	r3, 7
 624:	2d c0       	rjmp	.+90     	; 0x680 <vfprintf+0xf6>
 626:	20 ed       	ldi	r18, 0xD0	; 208
 628:	28 0f       	add	r18, r24
 62a:	2a 30       	cpi	r18, 0x0A	; 10
 62c:	40 f0       	brcs	.+16     	; 0x63e <vfprintf+0xb4>
 62e:	8e 32       	cpi	r24, 0x2E	; 46
 630:	b9 f4       	brne	.+46     	; 0x660 <vfprintf+0xd6>
 632:	36 fc       	sbrc	r3, 6
 634:	81 c1       	rjmp	.+770    	; 0x938 <__stack+0x39>
 636:	23 2d       	mov	r18, r3
 638:	20 64       	ori	r18, 0x40	; 64
 63a:	32 2e       	mov	r3, r18
 63c:	19 c0       	rjmp	.+50     	; 0x670 <vfprintf+0xe6>
 63e:	36 fe       	sbrs	r3, 6
 640:	06 c0       	rjmp	.+12     	; 0x64e <vfprintf+0xc4>
 642:	8a e0       	ldi	r24, 0x0A	; 10
 644:	98 9e       	mul	r9, r24
 646:	20 0d       	add	r18, r0
 648:	11 24       	eor	r1, r1
 64a:	92 2e       	mov	r9, r18
 64c:	11 c0       	rjmp	.+34     	; 0x670 <vfprintf+0xe6>
 64e:	ea e0       	ldi	r30, 0x0A	; 10
 650:	2e 9e       	mul	r2, r30
 652:	20 0d       	add	r18, r0
 654:	11 24       	eor	r1, r1
 656:	22 2e       	mov	r2, r18
 658:	f3 2d       	mov	r31, r3
 65a:	f0 62       	ori	r31, 0x20	; 32
 65c:	3f 2e       	mov	r3, r31
 65e:	08 c0       	rjmp	.+16     	; 0x670 <vfprintf+0xe6>
 660:	8c 36       	cpi	r24, 0x6C	; 108
 662:	21 f4       	brne	.+8      	; 0x66c <vfprintf+0xe2>
 664:	83 2d       	mov	r24, r3
 666:	80 68       	ori	r24, 0x80	; 128
 668:	38 2e       	mov	r3, r24
 66a:	02 c0       	rjmp	.+4      	; 0x670 <vfprintf+0xe6>
 66c:	88 36       	cpi	r24, 0x68	; 104
 66e:	41 f4       	brne	.+16     	; 0x680 <vfprintf+0xf6>
 670:	f7 01       	movw	r30, r14
 672:	93 fd       	sbrc	r25, 3
 674:	85 91       	lpm	r24, Z+
 676:	93 ff       	sbrs	r25, 3
 678:	81 91       	ld	r24, Z+
 67a:	7f 01       	movw	r14, r30
 67c:	81 11       	cpse	r24, r1
 67e:	b3 cf       	rjmp	.-154    	; 0x5e6 <vfprintf+0x5c>
 680:	98 2f       	mov	r25, r24
 682:	9f 7d       	andi	r25, 0xDF	; 223
 684:	95 54       	subi	r25, 0x45	; 69
 686:	93 30       	cpi	r25, 0x03	; 3
 688:	28 f4       	brcc	.+10     	; 0x694 <vfprintf+0x10a>
 68a:	0c 5f       	subi	r16, 0xFC	; 252
 68c:	1f 4f       	sbci	r17, 0xFF	; 255
 68e:	9f e3       	ldi	r25, 0x3F	; 63
 690:	99 83       	std	Y+1, r25	; 0x01
 692:	0d c0       	rjmp	.+26     	; 0x6ae <vfprintf+0x124>
 694:	83 36       	cpi	r24, 0x63	; 99
 696:	31 f0       	breq	.+12     	; 0x6a4 <vfprintf+0x11a>
 698:	83 37       	cpi	r24, 0x73	; 115
 69a:	71 f0       	breq	.+28     	; 0x6b8 <vfprintf+0x12e>
 69c:	83 35       	cpi	r24, 0x53	; 83
 69e:	09 f0       	breq	.+2      	; 0x6a2 <vfprintf+0x118>
 6a0:	59 c0       	rjmp	.+178    	; 0x754 <vfprintf+0x1ca>
 6a2:	21 c0       	rjmp	.+66     	; 0x6e6 <vfprintf+0x15c>
 6a4:	f8 01       	movw	r30, r16
 6a6:	80 81       	ld	r24, Z
 6a8:	89 83       	std	Y+1, r24	; 0x01
 6aa:	0e 5f       	subi	r16, 0xFE	; 254
 6ac:	1f 4f       	sbci	r17, 0xFF	; 255
 6ae:	88 24       	eor	r8, r8
 6b0:	83 94       	inc	r8
 6b2:	91 2c       	mov	r9, r1
 6b4:	53 01       	movw	r10, r6
 6b6:	13 c0       	rjmp	.+38     	; 0x6de <vfprintf+0x154>
 6b8:	28 01       	movw	r4, r16
 6ba:	f2 e0       	ldi	r31, 0x02	; 2
 6bc:	4f 0e       	add	r4, r31
 6be:	51 1c       	adc	r5, r1
 6c0:	f8 01       	movw	r30, r16
 6c2:	a0 80       	ld	r10, Z
 6c4:	b1 80       	ldd	r11, Z+1	; 0x01
 6c6:	36 fe       	sbrs	r3, 6
 6c8:	03 c0       	rjmp	.+6      	; 0x6d0 <vfprintf+0x146>
 6ca:	69 2d       	mov	r22, r9
 6cc:	70 e0       	ldi	r23, 0x00	; 0
 6ce:	02 c0       	rjmp	.+4      	; 0x6d4 <vfprintf+0x14a>
 6d0:	6f ef       	ldi	r22, 0xFF	; 255
 6d2:	7f ef       	ldi	r23, 0xFF	; 255
 6d4:	c5 01       	movw	r24, r10
 6d6:	0e 94 b1 04 	call	0x962	; 0x962 <strnlen>
 6da:	4c 01       	movw	r8, r24
 6dc:	82 01       	movw	r16, r4
 6de:	f3 2d       	mov	r31, r3
 6e0:	ff 77       	andi	r31, 0x7F	; 127
 6e2:	3f 2e       	mov	r3, r31
 6e4:	16 c0       	rjmp	.+44     	; 0x712 <vfprintf+0x188>
 6e6:	28 01       	movw	r4, r16
 6e8:	22 e0       	ldi	r18, 0x02	; 2
 6ea:	42 0e       	add	r4, r18
 6ec:	51 1c       	adc	r5, r1
 6ee:	f8 01       	movw	r30, r16
 6f0:	a0 80       	ld	r10, Z
 6f2:	b1 80       	ldd	r11, Z+1	; 0x01
 6f4:	36 fe       	sbrs	r3, 6
 6f6:	03 c0       	rjmp	.+6      	; 0x6fe <vfprintf+0x174>
 6f8:	69 2d       	mov	r22, r9
 6fa:	70 e0       	ldi	r23, 0x00	; 0
 6fc:	02 c0       	rjmp	.+4      	; 0x702 <vfprintf+0x178>
 6fe:	6f ef       	ldi	r22, 0xFF	; 255
 700:	7f ef       	ldi	r23, 0xFF	; 255
 702:	c5 01       	movw	r24, r10
 704:	0e 94 a6 04 	call	0x94c	; 0x94c <strnlen_P>
 708:	4c 01       	movw	r8, r24
 70a:	f3 2d       	mov	r31, r3
 70c:	f0 68       	ori	r31, 0x80	; 128
 70e:	3f 2e       	mov	r3, r31
 710:	82 01       	movw	r16, r4
 712:	33 fc       	sbrc	r3, 3
 714:	1b c0       	rjmp	.+54     	; 0x74c <vfprintf+0x1c2>
 716:	82 2d       	mov	r24, r2
 718:	90 e0       	ldi	r25, 0x00	; 0
 71a:	88 16       	cp	r8, r24
 71c:	99 06       	cpc	r9, r25
 71e:	b0 f4       	brcc	.+44     	; 0x74c <vfprintf+0x1c2>
 720:	b6 01       	movw	r22, r12
 722:	80 e2       	ldi	r24, 0x20	; 32
 724:	90 e0       	ldi	r25, 0x00	; 0
 726:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 72a:	2a 94       	dec	r2
 72c:	f4 cf       	rjmp	.-24     	; 0x716 <vfprintf+0x18c>
 72e:	f5 01       	movw	r30, r10
 730:	37 fc       	sbrc	r3, 7
 732:	85 91       	lpm	r24, Z+
 734:	37 fe       	sbrs	r3, 7
 736:	81 91       	ld	r24, Z+
 738:	5f 01       	movw	r10, r30
 73a:	b6 01       	movw	r22, r12
 73c:	90 e0       	ldi	r25, 0x00	; 0
 73e:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 742:	21 10       	cpse	r2, r1
 744:	2a 94       	dec	r2
 746:	21 e0       	ldi	r18, 0x01	; 1
 748:	82 1a       	sub	r8, r18
 74a:	91 08       	sbc	r9, r1
 74c:	81 14       	cp	r8, r1
 74e:	91 04       	cpc	r9, r1
 750:	71 f7       	brne	.-36     	; 0x72e <vfprintf+0x1a4>
 752:	e8 c0       	rjmp	.+464    	; 0x924 <__stack+0x25>
 754:	84 36       	cpi	r24, 0x64	; 100
 756:	11 f0       	breq	.+4      	; 0x75c <vfprintf+0x1d2>
 758:	89 36       	cpi	r24, 0x69	; 105
 75a:	41 f5       	brne	.+80     	; 0x7ac <vfprintf+0x222>
 75c:	f8 01       	movw	r30, r16
 75e:	37 fe       	sbrs	r3, 7
 760:	07 c0       	rjmp	.+14     	; 0x770 <vfprintf+0x1e6>
 762:	60 81       	ld	r22, Z
 764:	71 81       	ldd	r23, Z+1	; 0x01
 766:	82 81       	ldd	r24, Z+2	; 0x02
 768:	93 81       	ldd	r25, Z+3	; 0x03
 76a:	0c 5f       	subi	r16, 0xFC	; 252
 76c:	1f 4f       	sbci	r17, 0xFF	; 255
 76e:	08 c0       	rjmp	.+16     	; 0x780 <vfprintf+0x1f6>
 770:	60 81       	ld	r22, Z
 772:	71 81       	ldd	r23, Z+1	; 0x01
 774:	07 2e       	mov	r0, r23
 776:	00 0c       	add	r0, r0
 778:	88 0b       	sbc	r24, r24
 77a:	99 0b       	sbc	r25, r25
 77c:	0e 5f       	subi	r16, 0xFE	; 254
 77e:	1f 4f       	sbci	r17, 0xFF	; 255
 780:	f3 2d       	mov	r31, r3
 782:	ff 76       	andi	r31, 0x6F	; 111
 784:	3f 2e       	mov	r3, r31
 786:	97 ff       	sbrs	r25, 7
 788:	09 c0       	rjmp	.+18     	; 0x79c <vfprintf+0x212>
 78a:	90 95       	com	r25
 78c:	80 95       	com	r24
 78e:	70 95       	com	r23
 790:	61 95       	neg	r22
 792:	7f 4f       	sbci	r23, 0xFF	; 255
 794:	8f 4f       	sbci	r24, 0xFF	; 255
 796:	9f 4f       	sbci	r25, 0xFF	; 255
 798:	f0 68       	ori	r31, 0x80	; 128
 79a:	3f 2e       	mov	r3, r31
 79c:	2a e0       	ldi	r18, 0x0A	; 10
 79e:	30 e0       	ldi	r19, 0x00	; 0
 7a0:	a3 01       	movw	r20, r6
 7a2:	0e 94 08 05 	call	0xa10	; 0xa10 <__ultoa_invert>
 7a6:	88 2e       	mov	r8, r24
 7a8:	86 18       	sub	r8, r6
 7aa:	45 c0       	rjmp	.+138    	; 0x836 <vfprintf+0x2ac>
 7ac:	85 37       	cpi	r24, 0x75	; 117
 7ae:	31 f4       	brne	.+12     	; 0x7bc <vfprintf+0x232>
 7b0:	23 2d       	mov	r18, r3
 7b2:	2f 7e       	andi	r18, 0xEF	; 239
 7b4:	b2 2e       	mov	r11, r18
 7b6:	2a e0       	ldi	r18, 0x0A	; 10
 7b8:	30 e0       	ldi	r19, 0x00	; 0
 7ba:	25 c0       	rjmp	.+74     	; 0x806 <vfprintf+0x27c>
 7bc:	93 2d       	mov	r25, r3
 7be:	99 7f       	andi	r25, 0xF9	; 249
 7c0:	b9 2e       	mov	r11, r25
 7c2:	8f 36       	cpi	r24, 0x6F	; 111
 7c4:	c1 f0       	breq	.+48     	; 0x7f6 <vfprintf+0x26c>
 7c6:	18 f4       	brcc	.+6      	; 0x7ce <vfprintf+0x244>
 7c8:	88 35       	cpi	r24, 0x58	; 88
 7ca:	79 f0       	breq	.+30     	; 0x7ea <vfprintf+0x260>
 7cc:	b5 c0       	rjmp	.+362    	; 0x938 <__stack+0x39>
 7ce:	80 37       	cpi	r24, 0x70	; 112
 7d0:	19 f0       	breq	.+6      	; 0x7d8 <vfprintf+0x24e>
 7d2:	88 37       	cpi	r24, 0x78	; 120
 7d4:	21 f0       	breq	.+8      	; 0x7de <vfprintf+0x254>
 7d6:	b0 c0       	rjmp	.+352    	; 0x938 <__stack+0x39>
 7d8:	e9 2f       	mov	r30, r25
 7da:	e0 61       	ori	r30, 0x10	; 16
 7dc:	be 2e       	mov	r11, r30
 7de:	b4 fe       	sbrs	r11, 4
 7e0:	0d c0       	rjmp	.+26     	; 0x7fc <vfprintf+0x272>
 7e2:	fb 2d       	mov	r31, r11
 7e4:	f4 60       	ori	r31, 0x04	; 4
 7e6:	bf 2e       	mov	r11, r31
 7e8:	09 c0       	rjmp	.+18     	; 0x7fc <vfprintf+0x272>
 7ea:	34 fe       	sbrs	r3, 4
 7ec:	0a c0       	rjmp	.+20     	; 0x802 <vfprintf+0x278>
 7ee:	29 2f       	mov	r18, r25
 7f0:	26 60       	ori	r18, 0x06	; 6
 7f2:	b2 2e       	mov	r11, r18
 7f4:	06 c0       	rjmp	.+12     	; 0x802 <vfprintf+0x278>
 7f6:	28 e0       	ldi	r18, 0x08	; 8
 7f8:	30 e0       	ldi	r19, 0x00	; 0
 7fa:	05 c0       	rjmp	.+10     	; 0x806 <vfprintf+0x27c>
 7fc:	20 e1       	ldi	r18, 0x10	; 16
 7fe:	30 e0       	ldi	r19, 0x00	; 0
 800:	02 c0       	rjmp	.+4      	; 0x806 <vfprintf+0x27c>
 802:	20 e1       	ldi	r18, 0x10	; 16
 804:	32 e0       	ldi	r19, 0x02	; 2
 806:	f8 01       	movw	r30, r16
 808:	b7 fe       	sbrs	r11, 7
 80a:	07 c0       	rjmp	.+14     	; 0x81a <vfprintf+0x290>
 80c:	60 81       	ld	r22, Z
 80e:	71 81       	ldd	r23, Z+1	; 0x01
 810:	82 81       	ldd	r24, Z+2	; 0x02
 812:	93 81       	ldd	r25, Z+3	; 0x03
 814:	0c 5f       	subi	r16, 0xFC	; 252
 816:	1f 4f       	sbci	r17, 0xFF	; 255
 818:	06 c0       	rjmp	.+12     	; 0x826 <vfprintf+0x29c>
 81a:	60 81       	ld	r22, Z
 81c:	71 81       	ldd	r23, Z+1	; 0x01
 81e:	80 e0       	ldi	r24, 0x00	; 0
 820:	90 e0       	ldi	r25, 0x00	; 0
 822:	0e 5f       	subi	r16, 0xFE	; 254
 824:	1f 4f       	sbci	r17, 0xFF	; 255
 826:	a3 01       	movw	r20, r6
 828:	0e 94 08 05 	call	0xa10	; 0xa10 <__ultoa_invert>
 82c:	88 2e       	mov	r8, r24
 82e:	86 18       	sub	r8, r6
 830:	fb 2d       	mov	r31, r11
 832:	ff 77       	andi	r31, 0x7F	; 127
 834:	3f 2e       	mov	r3, r31
 836:	36 fe       	sbrs	r3, 6
 838:	0d c0       	rjmp	.+26     	; 0x854 <vfprintf+0x2ca>
 83a:	23 2d       	mov	r18, r3
 83c:	2e 7f       	andi	r18, 0xFE	; 254
 83e:	a2 2e       	mov	r10, r18
 840:	89 14       	cp	r8, r9
 842:	58 f4       	brcc	.+22     	; 0x85a <vfprintf+0x2d0>
 844:	34 fe       	sbrs	r3, 4
 846:	0b c0       	rjmp	.+22     	; 0x85e <vfprintf+0x2d4>
 848:	32 fc       	sbrc	r3, 2
 84a:	09 c0       	rjmp	.+18     	; 0x85e <vfprintf+0x2d4>
 84c:	83 2d       	mov	r24, r3
 84e:	8e 7e       	andi	r24, 0xEE	; 238
 850:	a8 2e       	mov	r10, r24
 852:	05 c0       	rjmp	.+10     	; 0x85e <vfprintf+0x2d4>
 854:	b8 2c       	mov	r11, r8
 856:	a3 2c       	mov	r10, r3
 858:	03 c0       	rjmp	.+6      	; 0x860 <vfprintf+0x2d6>
 85a:	b8 2c       	mov	r11, r8
 85c:	01 c0       	rjmp	.+2      	; 0x860 <vfprintf+0x2d6>
 85e:	b9 2c       	mov	r11, r9
 860:	a4 fe       	sbrs	r10, 4
 862:	0f c0       	rjmp	.+30     	; 0x882 <vfprintf+0x2f8>
 864:	fe 01       	movw	r30, r28
 866:	e8 0d       	add	r30, r8
 868:	f1 1d       	adc	r31, r1
 86a:	80 81       	ld	r24, Z
 86c:	80 33       	cpi	r24, 0x30	; 48
 86e:	21 f4       	brne	.+8      	; 0x878 <vfprintf+0x2ee>
 870:	9a 2d       	mov	r25, r10
 872:	99 7e       	andi	r25, 0xE9	; 233
 874:	a9 2e       	mov	r10, r25
 876:	09 c0       	rjmp	.+18     	; 0x88a <vfprintf+0x300>
 878:	a2 fe       	sbrs	r10, 2
 87a:	06 c0       	rjmp	.+12     	; 0x888 <vfprintf+0x2fe>
 87c:	b3 94       	inc	r11
 87e:	b3 94       	inc	r11
 880:	04 c0       	rjmp	.+8      	; 0x88a <vfprintf+0x300>
 882:	8a 2d       	mov	r24, r10
 884:	86 78       	andi	r24, 0x86	; 134
 886:	09 f0       	breq	.+2      	; 0x88a <vfprintf+0x300>
 888:	b3 94       	inc	r11
 88a:	a3 fc       	sbrc	r10, 3
 88c:	11 c0       	rjmp	.+34     	; 0x8b0 <vfprintf+0x326>
 88e:	a0 fe       	sbrs	r10, 0
 890:	06 c0       	rjmp	.+12     	; 0x89e <vfprintf+0x314>
 892:	b2 14       	cp	r11, r2
 894:	88 f4       	brcc	.+34     	; 0x8b8 <vfprintf+0x32e>
 896:	28 0c       	add	r2, r8
 898:	92 2c       	mov	r9, r2
 89a:	9b 18       	sub	r9, r11
 89c:	0e c0       	rjmp	.+28     	; 0x8ba <vfprintf+0x330>
 89e:	b2 14       	cp	r11, r2
 8a0:	60 f4       	brcc	.+24     	; 0x8ba <vfprintf+0x330>
 8a2:	b6 01       	movw	r22, r12
 8a4:	80 e2       	ldi	r24, 0x20	; 32
 8a6:	90 e0       	ldi	r25, 0x00	; 0
 8a8:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 8ac:	b3 94       	inc	r11
 8ae:	f7 cf       	rjmp	.-18     	; 0x89e <vfprintf+0x314>
 8b0:	b2 14       	cp	r11, r2
 8b2:	18 f4       	brcc	.+6      	; 0x8ba <vfprintf+0x330>
 8b4:	2b 18       	sub	r2, r11
 8b6:	02 c0       	rjmp	.+4      	; 0x8bc <vfprintf+0x332>
 8b8:	98 2c       	mov	r9, r8
 8ba:	21 2c       	mov	r2, r1
 8bc:	a4 fe       	sbrs	r10, 4
 8be:	10 c0       	rjmp	.+32     	; 0x8e0 <vfprintf+0x356>
 8c0:	b6 01       	movw	r22, r12
 8c2:	80 e3       	ldi	r24, 0x30	; 48
 8c4:	90 e0       	ldi	r25, 0x00	; 0
 8c6:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 8ca:	a2 fe       	sbrs	r10, 2
 8cc:	17 c0       	rjmp	.+46     	; 0x8fc <vfprintf+0x372>
 8ce:	a1 fc       	sbrc	r10, 1
 8d0:	03 c0       	rjmp	.+6      	; 0x8d8 <vfprintf+0x34e>
 8d2:	88 e7       	ldi	r24, 0x78	; 120
 8d4:	90 e0       	ldi	r25, 0x00	; 0
 8d6:	02 c0       	rjmp	.+4      	; 0x8dc <vfprintf+0x352>
 8d8:	88 e5       	ldi	r24, 0x58	; 88
 8da:	90 e0       	ldi	r25, 0x00	; 0
 8dc:	b6 01       	movw	r22, r12
 8de:	0c c0       	rjmp	.+24     	; 0x8f8 <vfprintf+0x36e>
 8e0:	8a 2d       	mov	r24, r10
 8e2:	86 78       	andi	r24, 0x86	; 134
 8e4:	59 f0       	breq	.+22     	; 0x8fc <vfprintf+0x372>
 8e6:	a1 fe       	sbrs	r10, 1
 8e8:	02 c0       	rjmp	.+4      	; 0x8ee <vfprintf+0x364>
 8ea:	8b e2       	ldi	r24, 0x2B	; 43
 8ec:	01 c0       	rjmp	.+2      	; 0x8f0 <vfprintf+0x366>
 8ee:	80 e2       	ldi	r24, 0x20	; 32
 8f0:	a7 fc       	sbrc	r10, 7
 8f2:	8d e2       	ldi	r24, 0x2D	; 45
 8f4:	b6 01       	movw	r22, r12
 8f6:	90 e0       	ldi	r25, 0x00	; 0
 8f8:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 8fc:	89 14       	cp	r8, r9
 8fe:	38 f4       	brcc	.+14     	; 0x90e <__stack+0xf>
 900:	b6 01       	movw	r22, r12
 902:	80 e3       	ldi	r24, 0x30	; 48
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 90a:	9a 94       	dec	r9
 90c:	f7 cf       	rjmp	.-18     	; 0x8fc <vfprintf+0x372>
 90e:	8a 94       	dec	r8
 910:	f3 01       	movw	r30, r6
 912:	e8 0d       	add	r30, r8
 914:	f1 1d       	adc	r31, r1
 916:	80 81       	ld	r24, Z
 918:	b6 01       	movw	r22, r12
 91a:	90 e0       	ldi	r25, 0x00	; 0
 91c:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 920:	81 10       	cpse	r8, r1
 922:	f5 cf       	rjmp	.-22     	; 0x90e <__stack+0xf>
 924:	22 20       	and	r2, r2
 926:	09 f4       	brne	.+2      	; 0x92a <__stack+0x2b>
 928:	42 ce       	rjmp	.-892    	; 0x5ae <vfprintf+0x24>
 92a:	b6 01       	movw	r22, r12
 92c:	80 e2       	ldi	r24, 0x20	; 32
 92e:	90 e0       	ldi	r25, 0x00	; 0
 930:	0e 94 cc 04 	call	0x998	; 0x998 <fputc>
 934:	2a 94       	dec	r2
 936:	f6 cf       	rjmp	.-20     	; 0x924 <__stack+0x25>
 938:	f6 01       	movw	r30, r12
 93a:	86 81       	ldd	r24, Z+6	; 0x06
 93c:	97 81       	ldd	r25, Z+7	; 0x07
 93e:	02 c0       	rjmp	.+4      	; 0x944 <__stack+0x45>
 940:	8f ef       	ldi	r24, 0xFF	; 255
 942:	9f ef       	ldi	r25, 0xFF	; 255
 944:	2b 96       	adiw	r28, 0x0b	; 11
 946:	e2 e1       	ldi	r30, 0x12	; 18
 948:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__epilogue_restores__>

0000094c <strnlen_P>:
 94c:	fc 01       	movw	r30, r24
 94e:	05 90       	lpm	r0, Z+
 950:	61 50       	subi	r22, 0x01	; 1
 952:	70 40       	sbci	r23, 0x00	; 0
 954:	01 10       	cpse	r0, r1
 956:	d8 f7       	brcc	.-10     	; 0x94e <strnlen_P+0x2>
 958:	80 95       	com	r24
 95a:	90 95       	com	r25
 95c:	8e 0f       	add	r24, r30
 95e:	9f 1f       	adc	r25, r31
 960:	08 95       	ret

00000962 <strnlen>:
 962:	fc 01       	movw	r30, r24
 964:	61 50       	subi	r22, 0x01	; 1
 966:	70 40       	sbci	r23, 0x00	; 0
 968:	01 90       	ld	r0, Z+
 96a:	01 10       	cpse	r0, r1
 96c:	d8 f7       	brcc	.-10     	; 0x964 <strnlen+0x2>
 96e:	80 95       	com	r24
 970:	90 95       	com	r25
 972:	8e 0f       	add	r24, r30
 974:	9f 1f       	adc	r25, r31
 976:	08 95       	ret

00000978 <strrev>:
 978:	dc 01       	movw	r26, r24
 97a:	fc 01       	movw	r30, r24
 97c:	67 2f       	mov	r22, r23
 97e:	71 91       	ld	r23, Z+
 980:	77 23       	and	r23, r23
 982:	e1 f7       	brne	.-8      	; 0x97c <strrev+0x4>
 984:	32 97       	sbiw	r30, 0x02	; 2
 986:	04 c0       	rjmp	.+8      	; 0x990 <strrev+0x18>
 988:	7c 91       	ld	r23, X
 98a:	6d 93       	st	X+, r22
 98c:	70 83       	st	Z, r23
 98e:	62 91       	ld	r22, -Z
 990:	ae 17       	cp	r26, r30
 992:	bf 07       	cpc	r27, r31
 994:	c8 f3       	brcs	.-14     	; 0x988 <strrev+0x10>
 996:	08 95       	ret

00000998 <fputc>:
 998:	0f 93       	push	r16
 99a:	1f 93       	push	r17
 99c:	cf 93       	push	r28
 99e:	df 93       	push	r29
 9a0:	fb 01       	movw	r30, r22
 9a2:	23 81       	ldd	r18, Z+3	; 0x03
 9a4:	21 fd       	sbrc	r18, 1
 9a6:	03 c0       	rjmp	.+6      	; 0x9ae <fputc+0x16>
 9a8:	8f ef       	ldi	r24, 0xFF	; 255
 9aa:	9f ef       	ldi	r25, 0xFF	; 255
 9ac:	2c c0       	rjmp	.+88     	; 0xa06 <fputc+0x6e>
 9ae:	22 ff       	sbrs	r18, 2
 9b0:	16 c0       	rjmp	.+44     	; 0x9de <fputc+0x46>
 9b2:	46 81       	ldd	r20, Z+6	; 0x06
 9b4:	57 81       	ldd	r21, Z+7	; 0x07
 9b6:	24 81       	ldd	r18, Z+4	; 0x04
 9b8:	35 81       	ldd	r19, Z+5	; 0x05
 9ba:	42 17       	cp	r20, r18
 9bc:	53 07       	cpc	r21, r19
 9be:	44 f4       	brge	.+16     	; 0x9d0 <fputc+0x38>
 9c0:	a0 81       	ld	r26, Z
 9c2:	b1 81       	ldd	r27, Z+1	; 0x01
 9c4:	9d 01       	movw	r18, r26
 9c6:	2f 5f       	subi	r18, 0xFF	; 255
 9c8:	3f 4f       	sbci	r19, 0xFF	; 255
 9ca:	31 83       	std	Z+1, r19	; 0x01
 9cc:	20 83       	st	Z, r18
 9ce:	8c 93       	st	X, r24
 9d0:	26 81       	ldd	r18, Z+6	; 0x06
 9d2:	37 81       	ldd	r19, Z+7	; 0x07
 9d4:	2f 5f       	subi	r18, 0xFF	; 255
 9d6:	3f 4f       	sbci	r19, 0xFF	; 255
 9d8:	37 83       	std	Z+7, r19	; 0x07
 9da:	26 83       	std	Z+6, r18	; 0x06
 9dc:	14 c0       	rjmp	.+40     	; 0xa06 <fputc+0x6e>
 9de:	8b 01       	movw	r16, r22
 9e0:	ec 01       	movw	r28, r24
 9e2:	fb 01       	movw	r30, r22
 9e4:	00 84       	ldd	r0, Z+8	; 0x08
 9e6:	f1 85       	ldd	r31, Z+9	; 0x09
 9e8:	e0 2d       	mov	r30, r0
 9ea:	09 95       	icall
 9ec:	89 2b       	or	r24, r25
 9ee:	e1 f6       	brne	.-72     	; 0x9a8 <fputc+0x10>
 9f0:	d8 01       	movw	r26, r16
 9f2:	16 96       	adiw	r26, 0x06	; 6
 9f4:	8d 91       	ld	r24, X+
 9f6:	9c 91       	ld	r25, X
 9f8:	17 97       	sbiw	r26, 0x07	; 7
 9fa:	01 96       	adiw	r24, 0x01	; 1
 9fc:	17 96       	adiw	r26, 0x07	; 7
 9fe:	9c 93       	st	X, r25
 a00:	8e 93       	st	-X, r24
 a02:	16 97       	sbiw	r26, 0x06	; 6
 a04:	ce 01       	movw	r24, r28
 a06:	df 91       	pop	r29
 a08:	cf 91       	pop	r28
 a0a:	1f 91       	pop	r17
 a0c:	0f 91       	pop	r16
 a0e:	08 95       	ret

00000a10 <__ultoa_invert>:
 a10:	fa 01       	movw	r30, r20
 a12:	aa 27       	eor	r26, r26
 a14:	28 30       	cpi	r18, 0x08	; 8
 a16:	51 f1       	breq	.+84     	; 0xa6c <__ultoa_invert+0x5c>
 a18:	20 31       	cpi	r18, 0x10	; 16
 a1a:	81 f1       	breq	.+96     	; 0xa7c <__ultoa_invert+0x6c>
 a1c:	e8 94       	clt
 a1e:	6f 93       	push	r22
 a20:	6e 7f       	andi	r22, 0xFE	; 254
 a22:	6e 5f       	subi	r22, 0xFE	; 254
 a24:	7f 4f       	sbci	r23, 0xFF	; 255
 a26:	8f 4f       	sbci	r24, 0xFF	; 255
 a28:	9f 4f       	sbci	r25, 0xFF	; 255
 a2a:	af 4f       	sbci	r26, 0xFF	; 255
 a2c:	b1 e0       	ldi	r27, 0x01	; 1
 a2e:	3e d0       	rcall	.+124    	; 0xaac <__ultoa_invert+0x9c>
 a30:	b4 e0       	ldi	r27, 0x04	; 4
 a32:	3c d0       	rcall	.+120    	; 0xaac <__ultoa_invert+0x9c>
 a34:	67 0f       	add	r22, r23
 a36:	78 1f       	adc	r23, r24
 a38:	89 1f       	adc	r24, r25
 a3a:	9a 1f       	adc	r25, r26
 a3c:	a1 1d       	adc	r26, r1
 a3e:	68 0f       	add	r22, r24
 a40:	79 1f       	adc	r23, r25
 a42:	8a 1f       	adc	r24, r26
 a44:	91 1d       	adc	r25, r1
 a46:	a1 1d       	adc	r26, r1
 a48:	6a 0f       	add	r22, r26
 a4a:	71 1d       	adc	r23, r1
 a4c:	81 1d       	adc	r24, r1
 a4e:	91 1d       	adc	r25, r1
 a50:	a1 1d       	adc	r26, r1
 a52:	20 d0       	rcall	.+64     	; 0xa94 <__ultoa_invert+0x84>
 a54:	09 f4       	brne	.+2      	; 0xa58 <__ultoa_invert+0x48>
 a56:	68 94       	set
 a58:	3f 91       	pop	r19
 a5a:	2a e0       	ldi	r18, 0x0A	; 10
 a5c:	26 9f       	mul	r18, r22
 a5e:	11 24       	eor	r1, r1
 a60:	30 19       	sub	r19, r0
 a62:	30 5d       	subi	r19, 0xD0	; 208
 a64:	31 93       	st	Z+, r19
 a66:	de f6       	brtc	.-74     	; 0xa1e <__ultoa_invert+0xe>
 a68:	cf 01       	movw	r24, r30
 a6a:	08 95       	ret
 a6c:	46 2f       	mov	r20, r22
 a6e:	47 70       	andi	r20, 0x07	; 7
 a70:	40 5d       	subi	r20, 0xD0	; 208
 a72:	41 93       	st	Z+, r20
 a74:	b3 e0       	ldi	r27, 0x03	; 3
 a76:	0f d0       	rcall	.+30     	; 0xa96 <__ultoa_invert+0x86>
 a78:	c9 f7       	brne	.-14     	; 0xa6c <__ultoa_invert+0x5c>
 a7a:	f6 cf       	rjmp	.-20     	; 0xa68 <__ultoa_invert+0x58>
 a7c:	46 2f       	mov	r20, r22
 a7e:	4f 70       	andi	r20, 0x0F	; 15
 a80:	40 5d       	subi	r20, 0xD0	; 208
 a82:	4a 33       	cpi	r20, 0x3A	; 58
 a84:	18 f0       	brcs	.+6      	; 0xa8c <__ultoa_invert+0x7c>
 a86:	49 5d       	subi	r20, 0xD9	; 217
 a88:	31 fd       	sbrc	r19, 1
 a8a:	40 52       	subi	r20, 0x20	; 32
 a8c:	41 93       	st	Z+, r20
 a8e:	02 d0       	rcall	.+4      	; 0xa94 <__ultoa_invert+0x84>
 a90:	a9 f7       	brne	.-22     	; 0xa7c <__ultoa_invert+0x6c>
 a92:	ea cf       	rjmp	.-44     	; 0xa68 <__ultoa_invert+0x58>
 a94:	b4 e0       	ldi	r27, 0x04	; 4
 a96:	a6 95       	lsr	r26
 a98:	97 95       	ror	r25
 a9a:	87 95       	ror	r24
 a9c:	77 95       	ror	r23
 a9e:	67 95       	ror	r22
 aa0:	ba 95       	dec	r27
 aa2:	c9 f7       	brne	.-14     	; 0xa96 <__ultoa_invert+0x86>
 aa4:	00 97       	sbiw	r24, 0x00	; 0
 aa6:	61 05       	cpc	r22, r1
 aa8:	71 05       	cpc	r23, r1
 aaa:	08 95       	ret
 aac:	9b 01       	movw	r18, r22
 aae:	ac 01       	movw	r20, r24
 ab0:	0a 2e       	mov	r0, r26
 ab2:	06 94       	lsr	r0
 ab4:	57 95       	ror	r21
 ab6:	47 95       	ror	r20
 ab8:	37 95       	ror	r19
 aba:	27 95       	ror	r18
 abc:	ba 95       	dec	r27
 abe:	c9 f7       	brne	.-14     	; 0xab2 <__ultoa_invert+0xa2>
 ac0:	62 0f       	add	r22, r18
 ac2:	73 1f       	adc	r23, r19
 ac4:	84 1f       	adc	r24, r20
 ac6:	95 1f       	adc	r25, r21
 ac8:	a0 1d       	adc	r26, r0
 aca:	08 95       	ret

00000acc <__prologue_saves__>:
 acc:	2f 92       	push	r2
 ace:	3f 92       	push	r3
 ad0:	4f 92       	push	r4
 ad2:	5f 92       	push	r5
 ad4:	6f 92       	push	r6
 ad6:	7f 92       	push	r7
 ad8:	8f 92       	push	r8
 ada:	9f 92       	push	r9
 adc:	af 92       	push	r10
 ade:	bf 92       	push	r11
 ae0:	cf 92       	push	r12
 ae2:	df 92       	push	r13
 ae4:	ef 92       	push	r14
 ae6:	ff 92       	push	r15
 ae8:	0f 93       	push	r16
 aea:	1f 93       	push	r17
 aec:	cf 93       	push	r28
 aee:	df 93       	push	r29
 af0:	cd b7       	in	r28, 0x3d	; 61
 af2:	de b7       	in	r29, 0x3e	; 62
 af4:	ca 1b       	sub	r28, r26
 af6:	db 0b       	sbc	r29, r27
 af8:	0f b6       	in	r0, 0x3f	; 63
 afa:	f8 94       	cli
 afc:	de bf       	out	0x3e, r29	; 62
 afe:	0f be       	out	0x3f, r0	; 63
 b00:	cd bf       	out	0x3d, r28	; 61
 b02:	09 94       	ijmp

00000b04 <__epilogue_restores__>:
 b04:	2a 88       	ldd	r2, Y+18	; 0x12
 b06:	39 88       	ldd	r3, Y+17	; 0x11
 b08:	48 88       	ldd	r4, Y+16	; 0x10
 b0a:	5f 84       	ldd	r5, Y+15	; 0x0f
 b0c:	6e 84       	ldd	r6, Y+14	; 0x0e
 b0e:	7d 84       	ldd	r7, Y+13	; 0x0d
 b10:	8c 84       	ldd	r8, Y+12	; 0x0c
 b12:	9b 84       	ldd	r9, Y+11	; 0x0b
 b14:	aa 84       	ldd	r10, Y+10	; 0x0a
 b16:	b9 84       	ldd	r11, Y+9	; 0x09
 b18:	c8 84       	ldd	r12, Y+8	; 0x08
 b1a:	df 80       	ldd	r13, Y+7	; 0x07
 b1c:	ee 80       	ldd	r14, Y+6	; 0x06
 b1e:	fd 80       	ldd	r15, Y+5	; 0x05
 b20:	0c 81       	ldd	r16, Y+4	; 0x04
 b22:	1b 81       	ldd	r17, Y+3	; 0x03
 b24:	aa 81       	ldd	r26, Y+2	; 0x02
 b26:	b9 81       	ldd	r27, Y+1	; 0x01
 b28:	ce 0f       	add	r28, r30
 b2a:	d1 1d       	adc	r29, r1
 b2c:	0f b6       	in	r0, 0x3f	; 63
 b2e:	f8 94       	cli
 b30:	de bf       	out	0x3e, r29	; 62
 b32:	0f be       	out	0x3f, r0	; 63
 b34:	cd bf       	out	0x3d, r28	; 61
 b36:	ed 01       	movw	r28, r26
 b38:	08 95       	ret

00000b3a <_exit>:
 b3a:	f8 94       	cli

00000b3c <__stop_program>:
 b3c:	ff cf       	rjmp	.-2      	; 0xb3c <__stop_program>
